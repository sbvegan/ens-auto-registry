/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "KeeperCompatibleInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.KeeperCompatibleInterface__factory>;
    getContractFactory(
      name: "BaseRegistrar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseRegistrar__factory>;
    getContractFactory(
      name: "ENS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ENS__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC721",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "BaseRegistrar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseRegistrar__factory>;
    getContractFactory(
      name: "ENSCheckAvailability",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ENSCheckAvailability__factory>;
    getContractFactory(
      name: "IBaseRegistrar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBaseRegistrar__factory>;
    getContractFactory(
      name: "ENSRenewal",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ENSRenewal__factory>;
    getContractFactory(
      name: "IBaseRegistrar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBaseRegistrar__factory>;
    getContractFactory(
      name: "MockBaseRegistrar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockBaseRegistrar__factory>;

    getContractAt(
      name: "KeeperCompatibleInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.KeeperCompatibleInterface>;
    getContractAt(
      name: "BaseRegistrar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseRegistrar>;
    getContractAt(
      name: "ENS",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ENS>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC721",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "BaseRegistrar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseRegistrar>;
    getContractAt(
      name: "ENSCheckAvailability",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ENSCheckAvailability>;
    getContractAt(
      name: "IBaseRegistrar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBaseRegistrar>;
    getContractAt(
      name: "ENSRenewal",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ENSRenewal>;
    getContractAt(
      name: "IBaseRegistrar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBaseRegistrar>;
    getContractAt(
      name: "MockBaseRegistrar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockBaseRegistrar>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
