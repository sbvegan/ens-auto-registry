/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockBaseRegistrar,
  MockBaseRegistrarInterface,
} from "../MockBaseRegistrar";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "available",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "val",
        type: "bool",
      },
    ],
    name: "setExpired",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101e8806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c806396e494e81461003b578063aeb7d9cc1461006b575b600080fd5b61005560048036038101906100509190610112565b610087565b604051610062919061014e565b60405180910390f35b610085600480360381019061008091906100e5565b61009f565b005b60008060009054906101000a900460ff169050919050565b806000806101000a81548160ff02191690831515021790555050565b6000813590506100ca81610184565b92915050565b6000813590506100df8161019b565b92915050565b6000602082840312156100fb576100fa61017f565b5b6000610109848285016100bb565b91505092915050565b6000602082840312156101285761012761017f565b5b6000610136848285016100d0565b91505092915050565b61014881610169565b82525050565b6000602082019050610163600083018461013f565b92915050565b60008115159050919050565b6000819050919050565b600080fd5b61018d81610169565b811461019857600080fd5b50565b6101a481610175565b81146101af57600080fd5b5056fea2646970667358221220cddd7ce0ae87f8b4a66efb7e1a2069544bfe74cedd963934841d59082217646164736f6c63430008070033";

export class MockBaseRegistrar__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockBaseRegistrar> {
    return super.deploy(overrides || {}) as Promise<MockBaseRegistrar>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockBaseRegistrar {
    return super.attach(address) as MockBaseRegistrar;
  }
  connect(signer: Signer): MockBaseRegistrar__factory {
    return super.connect(signer) as MockBaseRegistrar__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockBaseRegistrarInterface {
    return new utils.Interface(_abi) as MockBaseRegistrarInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockBaseRegistrar {
    return new Contract(address, _abi, signerOrProvider) as MockBaseRegistrar;
  }
}
